package euler

import (
	"log"
	"math/rand"
	"testing"
)

func aeq(p, s []int) bool {
	for i, v := range p {
		if v != s[i] {
			return false
		}
	}
	return true
}

const MAX = 100000000
const bozosample = 10000000

func nmat(p, s []int) int {
	mat := 0
	for i, v := range p {
		if v == s[i] {
			mat++
		}
	}

	return mat
}

func bozo2(p, s []int) int {
	n := len(p)
	for i := 0; i < MAX; i++ {
		if aeq(p, s) {
			return i
		}
		j := rand.Intn(n)
		k := rand.Intn(n - 1)
		if k >= j {
			k++
		}
		p[j], p[k] = p[k], p[j]
	}
	log.Print("Hit MAX")
	return MAX
}

func bozo3(p, s []int) int {
	shp := [][]int{
		{0, 1, 2},
		{0, 2, 1},
		{1, 0, 2},
		{1, 2, 0},
		{2, 0, 1},
		{2, 1, 0},
	}

	n := len(p)
	var j [3]int
	for i := 0; i < MAX; i++ {
		if aeq(p, s) {
			return i
		}
		j[0] = rand.Intn(n)
		j[1] = rand.Intn(n - 1)
		if j[1] >= j[0] {
			j[1]++
		}
		for j[2] = rand.Intn(n); j[2] == j[0] || j[2] == j[1]; j[2] = rand.Intn(n) {
		}
		sh := shp[rand.Intn(6)]
		// log.Print("shuffle ", j, " to ", sh, " p ", p)
		p[j[0]], p[j[1]], p[j[2]] = p[j[sh[0]]], p[j[sh[1]]], p[j[sh[2]]]
		// log.Print(p)
	}
	log.Print("Hit MAX")

	return MAX
}

func prob367() int {
	perms := perms5
	log.Print("Run ", perms[1], " samples ", bozosample)
	NT := int64(0)
	p := make([]int, len(perms[len(perms)-1]))
	for i, po := range perms[1:] {
		NMAT := nmat(po, perms[0])
		if NMAT != 3 {
			continue
		}
		p = p[:len(po)]
		NP := int64(0)
		NPM := 1001
		//NPM2 := 1001
		for k := 0; k < bozosample; k++ {
			//copy(p, po)
			//nb2 := bozo2(p, perms[0])
			copy(p, po)
			nb := bozo3(p, perms[0])
			//log.Print(i, k, nb)
			if NPM > nb {
				NPM = nb
			}
			/* if NPM2 > nb2 {
				NPM2 = nb2
			}*/
			NP += int64(nb)
			if (k+1)%1000000 == 0 {
				log.Print(i+1, k+1, float64(NP)/float64(k))
			}
		}
		log.Print(i+1, NMAT, NPM, float64(NP)/bozosample)
		NT += NP
	}
	log.Print(float64(NT) / float64(len(perms)) / bozosample)
	return 1
}

func xTestProb367(t *testing.T) {
	out := prob367()
	t.Log("Problem 367 ", out)
	log.Print("Not done")
	if out != 0 {
		t.Fail()
	}
}

func xBenchmarkProb367(b *testing.B) {
	for i := 0; i < b.N; i++ {
		prob367()
	}
}

var permsT = [][]int{
	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
	{1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
	{1, 0, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11},
	{1, 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11},
}

var perms8s = [][]int{
	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
	{1, 0, 2, 3, 4, 5, 6, 7},
	{1, 2, 3, 4, 5, 6, 7, 0},
	{1, 2, 3, 4, 5, 6, 0, 7},
	{1, 2, 3, 4, 5, 0, 6, 7},
	{1, 2, 3, 4, 0, 5, 6, 7},
	{1, 2, 3, 0, 4, 5, 6, 7},
	{1, 2, 0, 3, 4, 5, 6, 7},
}

var perms7s = [][]int{
	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
	{1, 2, 3, 4, 5, 6, 0},
	{1, 2, 3, 4, 5, 0, 6},
	{1, 2, 3, 4, 0, 5, 6},
	{1, 2, 3, 0, 4, 5, 6},
	{1, 2, 0, 3, 4, 5, 6},
	{1, 0, 2, 3, 4, 5, 6},
}

var perms6s = [][]int{
	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
	{1, 2, 3, 4, 5, 0},
	{1, 2, 3, 4, 0, 5},
	{1, 2, 3, 0, 4, 5},
	{1, 2, 0, 3, 4, 5},
	{1, 0, 2, 3, 4, 5},
}

var perms5s = [][]int{
	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
	{1, 2, 3, 4, 0},
	{1, 2, 3, 0, 4},
	{1, 2, 0, 3, 4},
	{1, 0, 2, 3, 4},
}

var perms1s = [][]int{
	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
	{1, 0, 2, 3},
	{1, 0, 2, 3, 4},
	{1, 0, 2, 3, 4, 5},
	{1, 0, 2, 3, 4, 5, 6},
	{1, 0, 2, 3, 4, 5, 6, 7},
	{1, 0, 2, 3, 4, 5, 6, 7, 8},
	{1, 0, 2, 3, 4, 5, 6, 7, 8, 9},
	{1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10},
	{1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
}

var perms5 = [][]int{
	{0, 1, 2, 3, 4},
	{0, 1, 2, 4, 3},
	{0, 1, 3, 2, 4},
	{0, 1, 3, 4, 2},
	{0, 1, 4, 2, 3},
	{0, 1, 4, 3, 2},
	{0, 2, 1, 3, 4},
	{0, 2, 1, 4, 3},
	{0, 2, 3, 1, 4},
	{0, 2, 3, 4, 1},
	{0, 2, 4, 1, 3},
	{0, 2, 4, 3, 1},
	{0, 3, 1, 2, 4},
	{0, 3, 1, 4, 2},
	{0, 3, 2, 1, 4},
	{0, 3, 2, 4, 1},
	{0, 3, 4, 1, 2},
	{0, 3, 4, 2, 1},
	{0, 4, 1, 2, 3},
	{0, 4, 1, 3, 2},
	{0, 4, 2, 1, 3},
	{0, 4, 2, 3, 1},
	{0, 4, 3, 1, 2},
	{0, 4, 3, 2, 1},
	{1, 0, 2, 3, 4},
	{1, 0, 2, 4, 3},
	{1, 0, 3, 2, 4},
	{1, 0, 3, 4, 2},
	{1, 0, 4, 2, 3},
	{1, 0, 4, 3, 2},
	{1, 2, 0, 3, 4},
	{1, 2, 0, 4, 3},
	{1, 2, 3, 0, 4},
	{1, 2, 3, 4, 0},
	{1, 2, 4, 0, 3},
	{1, 2, 4, 3, 0},
	{1, 3, 0, 2, 4},
	{1, 3, 0, 4, 2},
	{1, 3, 2, 0, 4},
	{1, 3, 2, 4, 0},
	{1, 3, 4, 0, 2},
	{1, 3, 4, 2, 0},
	{1, 4, 0, 2, 3},
	{1, 4, 0, 3, 2},
	{1, 4, 2, 0, 3},
	{1, 4, 2, 3, 0},
	{1, 4, 3, 0, 2},
	{1, 4, 3, 2, 0},
	{2, 0, 1, 3, 4},
	{2, 0, 1, 4, 3},
	{2, 0, 3, 1, 4},
	{2, 0, 3, 4, 1},
	{2, 0, 4, 1, 3},
	{2, 0, 4, 3, 1},
	{2, 1, 0, 3, 4},
	{2, 1, 0, 4, 3},
	{2, 1, 3, 0, 4},
	{2, 1, 3, 4, 0},
	{2, 1, 4, 0, 3},
	{2, 1, 4, 3, 0},
	{2, 3, 0, 1, 4},
	{2, 3, 0, 4, 1},
	{2, 3, 1, 0, 4},
	{2, 3, 1, 4, 0},
	{2, 3, 4, 0, 1},
	{2, 3, 4, 1, 0},
	{2, 4, 0, 1, 3},
	{2, 4, 0, 3, 1},
	{2, 4, 1, 0, 3},
	{2, 4, 1, 3, 0},
	{2, 4, 3, 0, 1},
	{2, 4, 3, 1, 0},
	{3, 0, 1, 2, 4},
	{3, 0, 1, 4, 2},
	{3, 0, 2, 1, 4},
	{3, 0, 2, 4, 1},
	{3, 0, 4, 1, 2},
	{3, 0, 4, 2, 1},
	{3, 1, 0, 2, 4},
	{3, 1, 0, 4, 2},
	{3, 1, 2, 0, 4},
	{3, 1, 2, 4, 0},
	{3, 1, 4, 0, 2},
	{3, 1, 4, 2, 0},
	{3, 2, 0, 1, 4},
	{3, 2, 0, 4, 1},
	{3, 2, 1, 0, 4},
	{3, 2, 1, 4, 0},
	{3, 2, 4, 0, 1},
	{3, 2, 4, 1, 0},
	{3, 4, 0, 1, 2},
	{3, 4, 0, 2, 1},
	{3, 4, 1, 0, 2},
	{3, 4, 1, 2, 0},
	{3, 4, 2, 0, 1},
	{3, 4, 2, 1, 0},
	{4, 0, 1, 2, 3},
	{4, 0, 1, 3, 2},
	{4, 0, 2, 1, 3},
	{4, 0, 2, 3, 1},
	{4, 0, 3, 1, 2},
	{4, 0, 3, 2, 1},
	{4, 1, 0, 2, 3},
	{4, 1, 0, 3, 2},
	{4, 1, 2, 0, 3},
	{4, 1, 2, 3, 0},
	{4, 1, 3, 0, 2},
	{4, 1, 3, 2, 0},
	{4, 2, 0, 1, 3},
	{4, 2, 0, 3, 1},
	{4, 2, 1, 0, 3},
	{4, 2, 1, 3, 0},
	{4, 2, 3, 0, 1},
	{4, 2, 3, 1, 0},
	{4, 3, 0, 1, 2},
	{4, 3, 0, 2, 1},
	{4, 3, 1, 0, 2},
	{4, 3, 1, 2, 0},
	{4, 3, 2, 0, 1},
	{4, 3, 2, 1, 0},
}

var perms4 = [][]int{
	{0, 1, 2, 3}, //  0 0 0  0       0           
	{0, 1, 3, 2}, //  1 2 1  23     27             
	{0, 2, 1, 3}, //  2 2 1  23     27             
	{0, 2, 3, 1}, //  3 3 2  26.25  28.5                
	{0, 3, 1, 2}, //  4 3 2  26.25  28.5                
	{0, 3, 2, 1}, //  5 2 1  23     27             
	{1, 0, 2, 3}, //  6 2 1  23     27             
	{1, 0, 3, 2}, //  7 4 2* 27     30             
	{1, 2, 0, 3}, //  8 3 2  26.25  28.5                
	{1, 2, 3, 0}, //  9 4 3  27.5   30               
	{1, 3, 0, 2}, // 10 4 3  27.5   30               
	{1, 3, 2, 0}, // 11 3 2  26.25  28.5                
	{2, 0, 1, 3}, // 12 3 2  26.25  28.5                
	{2, 0, 3, 1}, // 13 4 3  27.5   30               
	{2, 1, 0, 3}, // 14 2 1  23     27             
	{2, 1, 3, 0}, // 15 3 2  26.25  28.5                
	{2, 3, 0, 1}, // 16 4 2* 27     30             
	{2, 3, 1, 0}, // 17 4 3  27.5   30               
	{3, 0, 1, 2}, // 18 4 3  27.5   30               
	{3, 0, 2, 1}, // 19 3 2  26.25  28.5                
	{3, 1, 0, 2}, // 20 3 2  26.25  28.5                
	{3, 1, 2, 0}, // 21 2 1  23     27             
	{3, 2, 0, 1}, // 22 4 3  27.5   30               
	{3, 2, 1, 0}, // 23 4 2* 27     30             
}
